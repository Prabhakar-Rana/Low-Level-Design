import java.util.*;
import java.lang.*;
import java.io.*;

enum VehicleType{
    CAR, BIKE;
}

abstract class Vehicle{
    VehicleType vehicleType;
    String vehicleNumer;
    Vehicle(String vehicleNumer){
        this.vehicleNumer = vehicleNumer;
    }
}

class Bike extends Vehicle{
    Bike(String no){
        super(no);
        vehicleType = VehicleType.BIKE;
    }
}

class Car extends Vehicle{
     Car(String no){
        super(no);
        vehicleType = VehicleType.CAR;
    }
}

class VehicleFactory{
    public static Vehicle createVehicle(String no, VehicleType type){
        switch(type){
            case CAR: return new Car(no);
            case BIKE: return new Bike(no);     
            default: throw new IllegalArgumentException("Invalid vehicle type");
        }
    }
}

class Spot{
    boolean isEmpty;
    Spot(){
        this.isEmpty = true;
    }
}

class ParkingSystem{
    List<Spot> parking = new ArrayList<>();
    ParkingSystem(){
        for(int i=0;i<10;i++){
            parking.add(new Spot());
        }
    }
    List<Spot>getparking(){
        return parking;
    }
}

class ParkingManger{
    ParkingSystem lot;
    ParkingManger(ParkingSystem lot){
        this.lot = lot;
    }
    
    void park(Vehicle v){
        for(int i=0;i<lot.getparking().size();i++){
            if(lot.getparking().get(i).isEmpty==true){
                lot.getparking().get(i).isEmpty = false;
                System.out.println("Vehicle parked successFully in index->" + i);
                break;
            } 
        }
    }
    
    void unPark(int idx){
        if(lot.getparking().size()>idx && idx>=0){
            if(lot.getparking().get(idx).isEmpty==true){
                lot.getparking().get(idx).isEmpty=false;
                System.out.println("unPark successFully !");
            } else{
                System.out.println("Spot already unPark !");
            }
        } else{
            System.out.println("Invalid Postion !");
        }
    }
    
    void checkSpotStatus(){
        for(int i=0;i<lot.getparking().size();i++){
            if(lot.getparking().get(i).isEmpty==true){
                System.out.print("true ");
            } else{
                System.out.print("false ");
            }
        }
    }
    
    
}

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
	   ParkingSystem parking = new ParkingSystem();
	   ParkingManger lot = new ParkingManger(parking);
	   Vehicle v1 = VehicleFactory.createVehicle("bike123", VehicleType.BIKE);
	   Vehicle v2 = VehicleFactory.createVehicle("car345", VehicleType.CAR);
	   lot.checkSpotStatus();
	   lot.park(v1);
	   lot.checkSpotStatus();
	}
}



VehicleType (enum) – Defines types of vehicles: CAR and BIKE.

Vehicle (abstract class) – A base class for all vehicles, storing vehicle number and type.

Car (class) – Inherits from Vehicle, represents a car.

Bike (class) – Inherits from Vehicle, represents a bike.

VehicleFactory (class) – Uses factory pattern to create Car or Bike objects based on input.

Spot (class) – Represents one parking spot, tracks whether it's empty or not.

ParkingSystem (class) – Creates and stores a list of 10 parking spots.

ParkingManger (class) – Handles parking, unparking, and showing parking status.

Codechef (class) – The main class where the program runs: creates vehicles, parks them, and checks status.
