import java.util.*;
import java.lang.*;
import java.io.*;

enum Move{
    X, O;
}

class Player{
    String playerName;
    Move move;
    Player(String playerName, Move move){
        this.playerName = playerName;
        this.move = move;
    }

    public Move getMove(){
        return move;
    }

    public String getPlayerName() {
        return playerName;
    }
}

class Board{
    char[][] board = new char[3][3];
    Board(){
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                board[i][j] = '*';
            }
        }
    }}

class PlayGame{
    Board board;
    Queue<Player>queue = new LinkedList<>();
    PlayGame(Board board, Player p1, Player p2){
        this.board = board;
        queue.add(p1);
        queue.add(p2);
    }

    void startGame(){
        while(winGame()==null && gameOver()==false){
            showBoard();
            Player p = queue.remove();
            Scanner scanner = new Scanner(System.in);
            int i = scanner.nextInt();
            int j = scanner.nextInt();
            if(checkValidCell(i, j)){
                board.board[i][j] = p.getMove().toString().charAt(0);
            } else{
                System.out.println("coordinates are not valid !");
            }
            queue.add(p);
            if(winGame()!=null){
                System.out.println("this player win the game="+ winGame().getPlayerName());
            }
            //queue.add(p);
        }
    }

    boolean checkValidCell(int i, int j){
        if(i<3 && i>=0 && j<3 && j>=0 && board.board[i][j]=='*'){
            return true;
        } else{
            return false;
        }
    }

    void movePice(Player player, int i, int j){
        if(checkValidCell(i, j)){
            board.board[i][j] = player.getMove().toString().charAt(0);
        } else{
            System.out.println("this postion is invalid !");
        }
    }

    Player winGame(){
        for(int i=0;i<3;i++){
            if((board.board[i][0]==board.board[i][1] && board.board[i][0]==board.board[i][2]) && board.board[i][0]!='*'){
                return getPlayerFromQueue(board.board[i][0]);
            }

            if((board.board[0][i]==board.board[1][i] && board.board[0][i]==board.board[2][i]) && board.board[0][i]!='*'){
                return getPlayerFromQueue(board.board[0][i]);
            }
        }
        return null;
    }

    Player getPlayerFromQueue(char c){
        for(Player p : queue){
            if(p.getMove().toString().charAt(0)==c){
                return p;
            }
        }
        return null;
    }

    boolean gameOver(){
        int count =0;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(board.board[i][j]=='*') count++;
            }
        }
        if(count==0) return true;
        else return false;
    }

    void showBoard(){
        for(int i=0;i<board.board.length;i++){
            for(int j=0;j<3;j++){
                System.out.print(board.board[i][j]+ "  ");
            }
            System.out.println();
        }
    }
}

class Codechef
{
    public static void main (String[] args) throws java.lang.Exception
    {
        Player p1 = new Player("rahul-1", Move.X);
        Player p2 = new Player("rahul-2", Move.O);
        Board bo = new Board();
        PlayGame play = new PlayGame(bo, p1, p2);
        play.startGame();
    }
}
